#%RAML 0.8
title: bookingkit api
version: v3
baseUri: https://api.bookingkit.de/v3/
mediaType: application/json
protocols: [HTTPS]
documentation:
  - title: Introduction into the API
    content: |
      # REST API
      The bookingkit API is designed as RESTful API, all data is returned in JSON format so it can easily be used in all environments.
      For more information regarding RESTful APIs please visit [wikipedia.com](http://en.wikipedia.org/wiki/Representational_state_transfer)

      # Basic Request structure
      ### Building the URL's
      The current version of the API is v3 so all requests will be send to
      ```
      https://api.bookingkit.de/v3/
      ```
      The to request a resource collection append the name of that collection to the URL like so
      ```
      https://api.bookingkit.de/v3/events/
      ```
      A complete list of the available resources is listed below. To load a single item use it's id as in this example:
      ```
      https://api.bookingkit.de/v3/events/0cc175b9c0f1b6a831c399e269772661/
      ```
      Related resources may also be requested
      ```
      https://api.bookingkit.de/v3/events/0cc175b9c0f1b6a831c399e269772661/dates/
      ```
      ### Filtering the results
      Resource collections may and should be filtered to fit individual needs. A complete list of query parameters can be found for each request. The order of the query parameters is not important and all are optional so only the ones that are needed must be send.
      ```
      https://api.bookingkit.de/v3/dates/?start_date=2016-01-01T10:00:00Z&limit=10
      ```

      # Oauth Authentication
      Every request to the API requires a valid Token. Tokens can be requested from HTTPS://api.bookingkit.de/oauth/token with the provided client_id and client_secret. You can use the provided testing tool here to test your API calls.

      # Overriding HTTP method
      Clients that cannot send PATCH or DELETE requests may also send a POST request and append the query paramenter "method" to override the HTTP request type. Only the values "PATCH" and "DELETE" are accepted

      # Support
      If you have any questions on implementing our API or you would like to request access to the API contact our customer support at [service@bookingkit.de](mailto:service@bookingkit.de)

  - title: Advanced usage
    content: |
      # Pagination


      ## Best Practice
      We encourage you to use an open end Pagination, meaning that the pagination does not have the information on which the last page is but rather will only communicate if there is a "next page". For this purpose every collection request will have Link Headers providing a link to the "next page", "previous page" and first page.
      This is by far the better method of creating a pagination of the bookingkit resources and a lot faster then the standard way. For more information on link headers read: [W3.org on weblinks](http://www.w3.org/TR/html401/struct/links.html#h-12.1.2), [RFC5988 specification](https://tools.ietf.org/html/rfc5988)
      The link headers contain automatic pagination as long as a page size was set through the *limit* query parameter

      ## Slow version
      **We do not encourage you to use this method unless absolutely necessary and only for collections with a low count.**
      Collection requests support the optional query parameter *with_count* is set to true the response will also contain a "X-Total_Count" header informing you of the total count of the filtered collection ignoring of course limit and offset. Also a link Header with relation last will be send.
      As you can imagine this renders the requests unnecessarily slow.

      ## Important note
      The bookingkit API has an absolute maximum limit set to 10.000 entries, setting a limit higher that this has no effect at all. Also using *with_count* for a collection that returns 100.000 items has no effect as the X-Total_Count header will always be 100.000.
      Use the automated pagination solution described above for such large collections.


      # Performance
      Performance of the API is a constant concern, we encourage you to use the provided **fields** query paramenter to only request data that you need. Also use limits whenever appliable if you only need a limited amount of results.
      As mentioned above try to avoid unnecessary **with_count** requests

      All Responses are gzipped
  - title: |
      ! Under Construction !
    content: |
      ## Structure
      Please be advised that the specification is still under construction missing areas will be completed shortly. Changes to current definitions are not to be expected. Should such changes be necessary we will clearly communicate them to our partners.

securitySchemes:
  - oauth_2_0: !include securitySchemes/oauth_2.yaml

securedBy: [oauth_2_0]

schemas:
  - vendor: !include schemas/vendor.json
  - vendors: !include schemas/vendors.json
  - event: !include schemas/event.json
  - events: !include schemas/events.json
  - date: !include schemas/date.json
  - dates: !include schemas/dates.json
  - eventDates: !include schemas/eventDates.json
  - order: !include schemas/order.json
  - orders: !include schemas/orders.json
  - error: !include schemas/error.json

resourceTypes:
  - collection: !include resourceTypes/collection.yaml
  - item: !include resourceTypes/item.yaml

traits:
  - eventsCollection: !include traits/eventsCollection.yaml
  - vendorsCollection: !include traits/vendorsCollection.yaml
  - datesCollection: !include traits/datesCollection.yaml
  - eventDatesCollection: !include traits/eventDatesCollection.yaml
  - ordersCollection: !include traits/ordersCollection.yaml
  - underConstruction: !include traits/underConstruction.yaml
  - filerableCollection: !include traits/filterableCollection.yaml
  - createRequest: !include traits/createRequest.yaml
  - deleteRequest: !include traits/deleteRequest.yaml
  - patchRequest: !include traits/patchRequest.yaml

/vendors:
  displayName: Vendor
  description: Vendors are companies or persons who offer bookable activities on bookingkit.de
  type: collection
  get:
    is: [filerableCollection, vendorsCollection]

  /{id}:
    type: item

    /events:
      type: collection
      description: Event collection for the given vendor
      get:
        is: [filerableCollection, eventsCollection]
      post:
        is: [underConstruction, createRequest]

    /dates:
      type: collection
      description: Dates collection for the given vendor
      get:
        is: [filerableCollection, eventsCollection]

    /eventDates:
      type: collection
      description: EventDates collection for the given vendor
      get:
        is: [filerableCollection, datesCollection]
        description: |
          Get a list of eventDates in array form
          since api console does not yet support schema relations view eventDate schema for details
          **Attention:**
          due to the large amount of date inherit to this request it defaults to de minimum
          amount of fileds, please request the fields you need specificaly 

    /orders:
      type: collection
      description: Orders collection for the given vendor
      get:
        is: [filerableCollection, ordersCollection]
      post:
        is: [underConstruction, createRequest]


/events:
  displayName: Events
  description: Events are activities, they refer to the event in general and not to a date, bookable items are dates
  type: collection
  get:
    is: [filerableCollection, eventsCollection]
  post:
    is: [underConstruction, createRequest]

  /{id}:
    type: item
    patch:
      is: [underConstruction, patchRequest]
    delete:
      is: [underConstruction, deleteRequest]


    /dates:
      type: collection
      description: Date collection for the given event
      get:
        is: [filerableCollection, datesCollection]
      post:
        is: [underConstruction, createRequest]



/dates:
  displayName: Dates
  description: |
    Dates are the actual bookable items, they are occurrences of events
    this is a fast and slim request ideal for creating a calendar for example
  type: collection
  get:
    is: [filerableCollection, datesCollection]

  /{id}:
    type: item
    patch:
      is: [underConstruction, patchRequest]
    delete:
      is: [underConstruction,deleteRequest]


/eventDates:
  displayName: EventDates
  description: |
    combined resource
    delivers an object containing 2 arrays, one of type dates and one of type events
    this is a much slower request and delivers a lot of data only use if displaying date lists with event details
  type: collection
  get:
    is: [filerableCollection, datesCollection]
    description: |
      Get a list of eventDates in array form
      since api console does not yet support schema relations view eventDate schema for details
      **Attention:**
      due to the large amount of date inherit to this request it defaults to de minimum
      amount of fileds, please request the fields you need specificaly

/orders:
  description: |
    Orders MUST contain at least one ticket or voucher
  get:
    is: [filerableCollection, ordersCollection]
  post:
    is: [createRequest]
/orders/{id}:
    type: item
    patch:
      is: [patchRequest]

/categories:
  displayName: Categories
  description: the bookingkit category tree
  type: collection
  get:
    is: [underConstruction]
